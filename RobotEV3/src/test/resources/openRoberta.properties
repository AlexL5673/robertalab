# some of the following properties are retrieved from the parent pom.xml. They are used to guarantee that
# - the versions of the jars in the server match
# - the versions of the jars on the robot match
# - the version of the user program jar (generated on the server and transmitted to the robot) and the version of the jars on the robot match
# Note, that in every jar there is a top-level property file that contains the version at the time of compiling the classes contained in that jar
version = ${project.version}
validversionrange.From = ${validversionrange.From}
validversionrange.To = ${validversionrange.To}

# the URL of the database is retrieved from the parent pom
hibernate.connection.url = ${hibernate.connection.url}

# robots for testing purposes; ev3 is default
robot.whitelist = ev3, nxt, ardu, nao, calliope, microbit

robot.plugin.1.name = ev3
robot.plugin.1.factory = de.fhg.iais.roberta.factory.EV3Factory
robot.plugin.1.generated.programs.dir  = ../OpenRobertaServer/userProjects/
# the ant script that calls the cross compiler and the tool creating the jar containing the user program
robot.plugin.1.generated.programs.build.xml  = ../RobotEV3/crosscompiler-ev3-build.xml
# the cross compiler needs a directory in which all jars/resources for compilation are stored
robot.plugin.1.compiler.resources.dir = ../RobotEV3/target/crossCompilerResources
# the /update resource needs a directory in which all jars/resources for uploading to the robot are stored
robot.plugin.1.updateResources.dir = ../RobotEV3/target/updateResources

robot.plugin.2.name = nxt
robot.plugin.2.factory = de.fhg.iais.roberta.factory.NxtFactory
robot.plugin.2.generated.programs.dir  = ../OpenRobertaServer/userProjects/
robot.plugin.2.compiler.resources.dir = ../RobotNXT/resources

robot.plugin.3.name = ardu
robot.plugin.3.factory = de.fhg.iais.roberta.factory.ArduFactory
robot.plugin.3.generated.programs.dir  = ../OpenRobertaServer/userProjects/
robot.plugin.3.compiler.resources.dir = ../RobotArdu/resources
robot.plugin.3.compiler.windows.dir = c:/avr/bin/
robot.plugin.3.compiler.linux.dir = /usr/bin/

robot.plugin.4.name = nao
robot.plugin.4.factory = de.fhg.iais.roberta.factory.NAOFactory
robot.plugin.4.generated.programs.dir  = ../OpenRobertaServer/userProjects/
# the ant script that calls the cross compiler and the tool creating the jar containing the user program
robot.plugin.4.generated.programs.build.xml  = ../RobotNAO/crosscompiler-ev3-build.xml
# the cross compiler needs a directory in which all jars/resources for compilation are stored
robot.plugin.4.compiler.resources.dir = ../RobotNAO/target/crossCompilerResources
# the /update resource needs a directory in which all jars/resources for uploading to the robot are stored
robot.plugin.4.updateResources.dir = ../RobotNAO/target/updateResources

robot.plugin.5.name = calliope
robot.plugin.5.factory = de.fhg.iais.roberta.factory.CalliopeFactory
robot.plugin.5.generated.programs.dir  = ../OpenRobertaServer/userProjects/
robot.plugin.5.compiler.resources.dir = ../RobotMbed/resources
robot.plugin.5.compiler.dir = /usr/bin/

robot.plugin.6.name = microbit
robot.plugin.6.factory = de.fhg.iais.roberta.factory.MicrobitFactory
robot.plugin.6.compiler.resources.dir = ../RobotMbed/resources
robot.plugin.6.compiler.dir = /usr/bin/
