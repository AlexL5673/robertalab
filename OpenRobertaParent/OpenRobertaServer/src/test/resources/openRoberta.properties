# some of the following properties are retrieved from the parent pom.xml. They are used to guarantee that versions match and a database upgrade is possible
openRobertaServer.version = ${project.version}
openRobertaServer.history = ${openRobertaServer.history}

# the URL of the database is retrieved from the parent pom
hibernate.connection.url = ${hibernate.connection.url}

server.public = true

# the robot plugins should be a copy of the "official" properties from src/main/resources
robot.whitelist = sim, ev3lejosv1, ev3lejos, ev3dev, nxt, microbit, ardu, nao, bob3, calliope2017, calliope2016

robot.plugin.1.name = ev3lejos
robot.plugin.1.group = ev3
robot.plugin.1.factory = de.fhg.iais.roberta.factory.ev3.lejos.v0.Factory
robot.plugin.1.compiler.resources.dir = ../RobotEV3/resources/crossCompilerResources/lejos_v0/
# the /update resource needs a directory in which all jars/resources for uploading to the robot are stored
robot.plugin.1.updateResources.dir = ../RobotEV3/resources/updateResources/lejos_v0

robot.plugin.2.name = ev3dev
robot.plugin.2.group = ev3
robot.plugin.2.factory = de.fhg.iais.roberta.factory.ev3.dev.Factory
robot.plugin.2.compiler.resources.dir = ../RobotEV3/resources/crossCompilerResources/

robot.plugin.3.name = nxt
robot.plugin.3.factory = de.fhg.iais.roberta.factory.nxt.Factory
robot.plugin.3.compiler.resources.dir = ../RobotNXT/resources

robot.plugin.4.name = ardu
# robot.plugin.4.group = ardu
robot.plugin.4.factory = de.fhg.iais.roberta.factory.arduino.botnroll.Factory
robot.plugin.4.compiler.resources.dir = ../RobotArdu/resources
robot.plugin.4.compiler.windows.dir = c:/avr/bin/
robot.plugin.4.compiler.linux.dir = /usr/bin/

robot.plugin.5.name = nao
robot.plugin.5.factory = de.fhg.iais.roberta.factory.nao.Factory
# IS THIS REALLY USED? It won't work anyhow
robot.plugin.5.generated.programs.build.xml  = ../RobotNAO/crosscompiler-ev3-build.xml
robot.plugin.5.compiler.resources.dir = ../RobotNAO/target/crossCompilerResources
robot.plugin.5.updateResources.dir = RobotNAO/resources/updateResources

robot.plugin.6.name = calliope2016
robot.plugin.6.group = calliope
robot.plugin.6.factory = de.fhg.iais.roberta.factory.mbed.calliope.calliope2016.Factory
robot.plugin.6.compiler.resources.dir = ../RobotMbed/resources/libs2016
# set the location to the arm-none-eabi-g++ if is not set to the PATH (ex. /usr/bin/)
robot.plugin.6.compiler.dir = 

robot.plugin.7.name = calliope2017
robot.plugin.7.group = calliope
robot.plugin.7.factory = de.fhg.iais.roberta.factory.mbed.calliope.calliope2017.Factory
robot.plugin.7.compiler.resources.dir = ../RobotMbed/resources/libs2017
# set the location to the arm-none-eabi-g++ if is not set to the PATH (ex. /usr/bin/)
robot.plugin.7.compiler.dir = 

robot.plugin.8.name = microbit
robot.plugin.8.factory = de.fhg.iais.roberta.factory.mbed.microbit.Factory
robot.plugin.8.compiler.resources.dir = ../RobotMbed/resources
robot.plugin.8.compiler.dir = /usr/bin/

robot.plugin.9.name = mbot
robot.plugin.9.factory = de.fhg.iais.roberta.factory.arduino.mbot.Factory
robot.plugin.9.compiler.resources.dir = ../RobotArdu/resources
robot.plugin.9.compiler.windows.dir = c:/avr/bin/
robot.plugin.9.compiler.linux.dir = /usr/bin/

robot.plugin.10.name = bob3
robot.plugin.10.factory = de.fhg.iais.roberta.factory.arduino.bob3.Factory
robot.plugin.10.compiler.resources.dir = ../RobotArdu/resources
robot.plugin.10.compiler.windows.dir = c:/avr/bin/
robot.plugin.10.compiler.linux.dir = /usr/bin/

robot.plugin.11.name = ev3lejosv1
robot.plugin.11.group = ev3
robot.plugin.11.factory = de.fhg.iais.roberta.factory.ev3.lejos.v1.Factory
robot.plugin.11.compiler.resources.dir = ../RobotEV3/resources/crossCompilerResources/lejos_v1/
# the /update resource needs a directory in which all jars/resources for uploading to the robot are stored
robot.plugin.11.updateResources.dir = ../RobotEV3/resources/updateResources/lejos_v1
