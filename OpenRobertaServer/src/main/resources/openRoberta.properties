# some of the following properties are retrieved from the parent pom.xml. They are used to guarantee that
# - the versions of the jars in the server match
# - the versions of the jars on the robot match
# - the version of the user program jar (generated on the server and transmitted to the robot) and the version of the jars on the robot match
# Note, that in every jar there is a top-level property file that contains the version at the time of compiling the classes contained in that jar
version = ${project.version}
validversionrange.From = ${validversionrange.From}
validversionrange.To = ${validversionrange.To}

# the basedir for temporary data. Can be used by any plugin. Plugins may create subdirectories with their name to avoid confusion.
# If not set, a Java default temp directory is used. Be careful, if you choose this option!
#plugin.tempdir = D:/temp/openRoberta

hibernate.connection.url = jdbc:hsqldb:file:OpenRobertaServer/db/openroberta-db

# server name/ip-addr and port. This are defaults, which may be overwritten by command line parameter -d
server.ip = 0.0.0.0
server.port = 1999

# the plugin list below specifies all robots, which may be connected to OpenRoberta.
# The white list below specifies he names of those robot, which can be connected to the server using these properties.
# The first real robot in the white list is the default robot when a session is opened. The name "sim" in the white list triggers
# a default simulation button on the startup screen.
# For instance, if your school offers nxt robots only, do NOT remove all but the nxt plugins. Use this white list:
# robot.whitelist = sim, nxt
robot.whitelist = sim, ev3, calliope, nxt, microbit, ardu, nao
# the property robot.default is implicitly created by the ServerStarter

robot.plugin.1.name = ev3
robot.plugin.1.factory = de.fhg.iais.roberta.factory.EV3Factory
# ant script calling the cross compiler and jars the generated program depends on
robot.plugin.1.generated.programs.build.xml  = RobotEV3/resources/crosscompiler-ev3-build.xml
robot.plugin.1.compiler.resources.dir = crossCompilerResources
# the /update resource needs a directory in which all jars/resources for uploading to the robot are stored
robot.plugin.1.updateResources.dir = RobotEV3/resources/updateResources

robot.plugin.2.name = nxt
robot.plugin.2.factory = de.fhg.iais.roberta.factory.NxtFactory
robot.plugin.2.compiler.resources.dir = RobotNXT/resources

robot.plugin.3.name = ardu
robot.plugin.3.factory = de.fhg.iais.roberta.factory.ArduFactory
robot.plugin.3.compiler.resources.dir = RobotArdu/resources
robot.plugin.3.compiler.windows.dir = c:/avr/bin/
robot.plugin.3.compiler.linux.dir = /usr/bin/

robot.plugin.4.name = nao
robot.plugin.4.factory = de.fhg.iais.roberta.factory.NAOFactory
# IS THIS REALLY USED? It won't work anyhow
robot.plugin.4.generated.programs.build.xml  = RobotNAO/crosscompiler-ev3-build.xml
robot.plugin.4.compiler.resources.dir = RobotNAO/target/crossCompilerResources
robot.plugin.4.updateResources.dir = RobotNAO/target/updateResources

robot.plugin.5.name = calliope
robot.plugin.5.factory = de.fhg.iais.roberta.factory.CalliopeFactory
robot.plugin.5.compiler.resources.dir = RobotMbed/resources
# set the location to the arm-none-eabi-g++ if is not set to the PATH (ex. /usr/bin/)
robot.plugin.5.compiler.dir = 

robot.plugin.6.name = microbit
robot.plugin.6.factory = de.fhg.iais.roberta.factory.MicrobitFactory
robot.plugin.6.compiler.resources.dir = RobotMbed/resources
robot.plugin.6.compiler.dir = /usr/bin/